import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { joinExisting } from '../slang-utils/join-existing.js';
import { StringLiteral } from './StringLiteral.js';
import { AssemblyFlagsDeclaration } from './AssemblyFlagsDeclaration.js';
import { YulBlock } from './YulBlock.js';
export class AssemblyStatement {
    constructor(ast, options) {
        this.kind = NonterminalKind.AssemblyStatement;
        let metadata = getNodeMetadata(ast);
        if (ast.label) {
            this.label = new StringLiteral(ast.label, options);
        }
        if (ast.flags) {
            this.flags = new AssemblyFlagsDeclaration(ast.flags, options);
        }
        this.body = new YulBlock(ast.body, options);
        metadata = updateMetadata(metadata, [this.label, this.flags, this.body]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return joinExisting(' ', [
            'assembly',
            path.call(print, 'label'),
            path.call(print, 'flags'),
            path.call(print, 'body')
        ]);
    }
}
//# sourceMappingURL=AssemblyStatement.js.map