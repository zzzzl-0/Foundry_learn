import { NonterminalKind, TerminalNode } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { ModifierInvocation } from './ModifierInvocation.js';
import { OverrideSpecifier } from './OverrideSpecifier.js';
export class FallbackFunctionAttribute {
    constructor(ast, options) {
        this.kind = NonterminalKind.FallbackFunctionAttribute;
        let metadata = getNodeMetadata(ast);
        if (ast.variant instanceof TerminalNode) {
            this.variant = ast.variant.unparse();
        }
        else {
            switch (ast.variant.cst.kind) {
                case NonterminalKind.ModifierInvocation:
                    this.variant = new ModifierInvocation(ast.variant, options);
                    break;
                case NonterminalKind.OverrideSpecifier:
                    this.variant = new OverrideSpecifier(ast.variant);
                    break;
                default:
                    throw new Error(`Unexpected variant: ${ast.variant.cst.kind}`);
            }
        }
        metadata = updateMetadata(metadata, typeof this.variant === 'string' ? [] : [this.variant]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return typeof this.variant === 'string'
            ? this.variant
            : path.call(print, 'variant');
    }
}
//# sourceMappingURL=FallbackFunctionAttribute.js.map