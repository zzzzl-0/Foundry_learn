import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { doc } from 'prettier';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { YulBlock } from './YulBlock.js';
import { YulExpression } from './YulExpression.js';
const { join } = doc.builders;
export class YulForStatement {
    constructor(ast, options) {
        this.kind = NonterminalKind.YulForStatement;
        let metadata = getNodeMetadata(ast);
        this.initialization = new YulBlock(ast.initialization, options);
        this.condition = new YulExpression(ast.condition, options);
        this.iterator = new YulBlock(ast.iterator, options);
        this.body = new YulBlock(ast.body, options);
        metadata = updateMetadata(metadata, [
            this.initialization,
            this.condition,
            this.iterator,
            this.body
        ]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return join(' ', [
            'for',
            path.call(print, 'initialization'),
            path.call(print, 'condition'),
            path.call(print, 'iterator'),
            path.call(print, 'body')
        ]);
    }
}
//# sourceMappingURL=YulForStatement.js.map