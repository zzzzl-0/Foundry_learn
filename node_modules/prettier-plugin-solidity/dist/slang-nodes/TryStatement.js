import { doc } from 'prettier';
import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { printSeparatedItem } from '../slang-printers/print-separated-item.js';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { joinExisting } from '../slang-utils/join-existing.js';
import { Expression } from './Expression.js';
import { ReturnsDeclaration } from './ReturnsDeclaration.js';
import { Block } from './Block.js';
import { CatchClauses } from './CatchClauses.js';
const { line } = doc.builders;
export class TryStatement {
    constructor(ast, options) {
        this.kind = NonterminalKind.TryStatement;
        let metadata = getNodeMetadata(ast);
        this.expression = new Expression(ast.expression, options);
        if (ast.returns) {
            this.returns = new ReturnsDeclaration(ast.returns, options);
        }
        this.body = new Block(ast.body, options);
        this.catchClauses = new CatchClauses(ast.catchClauses, options);
        metadata = updateMetadata(metadata, [
            this.expression,
            this.returns,
            this.body,
            this.catchClauses
        ]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return [
            'try',
            printSeparatedItem(path.call(print, 'expression'), {
                firstSeparator: line
            }),
            joinExisting(' ', [
                path.call(print, 'returns'),
                path.call(print, 'body'),
                path.call(print, 'catchClauses')
            ])
        ];
    }
}
//# sourceMappingURL=TryStatement.js.map