import { NonterminalKind, TerminalKind } from '@nomicfoundation/slang/cst';
import { printSeparatedList } from '../slang-printers/print-separated-list.js';
import { isBinaryOperation } from '../slang-utils/is-binary-operation.js';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { TupleValue } from './TupleValue.js';
export class TupleValues {
    constructor(ast, options) {
        this.kind = NonterminalKind.TupleValues;
        let metadata = getNodeMetadata(ast, true);
        this.items = ast.items.map((item) => new TupleValue(item, options));
        this.separators = ast.separators.map((separator) => separator.unparse());
        metadata = updateMetadata(metadata, [this.items]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return this.items.length === 1 &&
            this.items[0].expression &&
            this.items[0].expression.variant.kind !== TerminalKind.Identifier &&
            isBinaryOperation(this.items[0].expression.variant)
            ? path.map(print, 'items')
            : printSeparatedList(path.map(print, 'items'));
    }
}
//# sourceMappingURL=TupleValues.js.map