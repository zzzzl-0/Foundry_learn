import { doc } from 'prettier';
import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { printSeparatedItem } from '../slang-printers/print-separated-item.js';
import { printComments } from '../slang-printers/print-comments.js';
import { printPreservingEmptyLines } from '../slang-printers/print-preserving-empty-lines.js';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { ContractMember } from './ContractMember.js';
const { hardline } = doc.builders;
export class ContractMembers {
    constructor(ast, options) {
        this.kind = NonterminalKind.ContractMembers;
        let metadata = getNodeMetadata(ast, true);
        this.items = ast.items.map((item) => new ContractMember(item, options));
        metadata = updateMetadata(metadata, [this.items]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print, options) {
        return this.items.length === 0 && this.comments.length === 0
            ? ''
            : printSeparatedItem([
                printPreservingEmptyLines(path, print, options),
                printComments(path)
            ], { firstSeparator: hardline, grouped: false });
    }
}
//# sourceMappingURL=ContractMembers.js.map