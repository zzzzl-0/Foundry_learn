import { doc } from 'prettier';
import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { createBinaryOperationPrinter } from '../slang-printers/create-binary-operation-printer.js';
import { createHugFunction } from '../slang-utils/create-hug-function.js';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { Expression } from './Expression.js';
const { group, indent } = doc.builders;
const tryToHug = createHugFunction(['**']);
const printExponentiationExpression = createBinaryOperationPrinter(() => (document) => group(document), // always group
() => (document) => indent(document) // always indent
);
export class ExponentiationExpression {
    constructor(ast, options) {
        this.kind = NonterminalKind.ExponentiationExpression;
        let metadata = getNodeMetadata(ast);
        this.leftOperand = new Expression(ast.leftOperand, options);
        this.operator = ast.operator.unparse();
        this.rightOperand = new Expression(ast.rightOperand, options);
        metadata = updateMetadata(metadata, [this.leftOperand, this.rightOperand]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
        this.rightOperand = tryToHug(this.rightOperand);
        this.leftOperand = tryToHug(this.leftOperand);
    }
    print(path, print, options) {
        return printExponentiationExpression(this, path, print, options);
    }
}
//# sourceMappingURL=ExponentiationExpression.js.map