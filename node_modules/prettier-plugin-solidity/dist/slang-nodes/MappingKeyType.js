import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { ElementaryType } from './ElementaryType.js';
import { IdentifierPath } from './IdentifierPath.js';
export class MappingKeyType {
    constructor(ast) {
        this.kind = NonterminalKind.MappingKeyType;
        let metadata = getNodeMetadata(ast);
        switch (ast.variant.cst.kind) {
            case NonterminalKind.ElementaryType:
                this.variant = new ElementaryType(ast.variant);
                break;
            case NonterminalKind.IdentifierPath:
                this.variant = new IdentifierPath(ast.variant);
                break;
            default:
                throw new Error(`Unexpected variant: ${ast.variant.cst.kind}`);
        }
        metadata = updateMetadata(metadata, [this.variant]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return path.call(print, 'variant');
    }
}
//# sourceMappingURL=MappingKeyType.js.map