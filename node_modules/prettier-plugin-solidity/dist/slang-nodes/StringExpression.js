import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { StringLiteral } from './StringLiteral.js';
import { StringLiterals } from './StringLiterals.js';
import { HexStringLiteral } from './HexStringLiteral.js';
import { HexStringLiterals } from './HexStringLiterals.js';
import { UnicodeStringLiterals } from './UnicodeStringLiterals.js';
export class StringExpression {
    constructor(ast, options) {
        this.kind = NonterminalKind.StringExpression;
        let metadata = getNodeMetadata(ast);
        switch (ast.variant.cst.kind) {
            case NonterminalKind.StringLiteral:
                this.variant = new StringLiteral(ast.variant, options);
                break;
            case NonterminalKind.StringLiterals:
                this.variant = new StringLiterals(ast.variant, options);
                break;
            case NonterminalKind.HexStringLiteral:
                this.variant = new HexStringLiteral(ast.variant, options);
                break;
            case NonterminalKind.HexStringLiterals:
                this.variant = new HexStringLiterals(ast.variant, options);
                break;
            case NonterminalKind.UnicodeStringLiterals:
                this.variant = new UnicodeStringLiterals(ast.variant, options);
                break;
            default:
                throw new Error(`Unexpected variant: ${ast.variant.cst.kind}`);
        }
        metadata = updateMetadata(metadata, [this.variant]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return path.call(print, 'variant');
    }
}
//# sourceMappingURL=StringExpression.js.map