import { doc } from 'prettier';
import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { YulExpression } from './YulExpression.js';
import { YulSwitchCases } from './YulSwitchCases.js';
const { hardline } = doc.builders;
export class YulSwitchStatement {
    constructor(ast, options) {
        this.kind = NonterminalKind.YulSwitchStatement;
        let metadata = getNodeMetadata(ast);
        this.expression = new YulExpression(ast.expression, options);
        this.cases = new YulSwitchCases(ast.cases, options);
        metadata = updateMetadata(metadata, [this.expression, this.cases]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return [
            'switch ',
            path.call(print, 'expression'),
            hardline,
            path.call(print, 'cases')
        ];
    }
}
//# sourceMappingURL=YulSwitchStatement.js.map