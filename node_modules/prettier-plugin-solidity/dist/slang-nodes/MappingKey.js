import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { joinExisting } from '../slang-utils/join-existing.js';
import { MappingKeyType } from './MappingKeyType.js';
import { Identifier } from './Identifier.js';
export class MappingKey {
    constructor(ast) {
        this.kind = NonterminalKind.MappingKey;
        let metadata = getNodeMetadata(ast);
        this.keyType = new MappingKeyType(ast.keyType);
        if (ast.name) {
            this.name = new Identifier(ast.name);
        }
        metadata = updateMetadata(metadata, [this.keyType]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return joinExisting(' ', [
            path.call(print, 'keyType'),
            path.call(print, 'name')
        ]);
    }
}
//# sourceMappingURL=MappingKey.js.map