import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { YulIdentifier } from './YulIdentifier.js';
import { YulParametersDeclaration } from './YulParametersDeclaration.js';
import { YulReturnsDeclaration } from './YulReturnsDeclaration.js';
import { YulBlock } from './YulBlock.js';
export class YulFunctionDefinition {
    constructor(ast, options) {
        this.kind = NonterminalKind.YulFunctionDefinition;
        let metadata = getNodeMetadata(ast);
        this.name = new YulIdentifier(ast.name);
        this.parameters = new YulParametersDeclaration(ast.parameters);
        if (ast.returns) {
            this.returns = new YulReturnsDeclaration(ast.returns);
        }
        this.body = new YulBlock(ast.body, options);
        metadata = updateMetadata(metadata, [
            this.parameters,
            this.returns,
            this.body
        ]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return [
            'function ',
            path.call(print, 'name'),
            path.call(print, 'parameters'),
            path.call(print, 'returns') || ' ',
            path.call(print, 'body')
        ];
    }
}
//# sourceMappingURL=YulFunctionDefinition.js.map