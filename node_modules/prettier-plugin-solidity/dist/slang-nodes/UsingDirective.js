import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { joinExisting } from '../slang-utils/join-existing.js';
import { UsingClause } from './UsingClause.js';
import { UsingTarget } from './UsingTarget.js';
export class UsingDirective {
    constructor(ast, options) {
        var _a;
        this.kind = NonterminalKind.UsingDirective;
        let metadata = getNodeMetadata(ast);
        this.clause = new UsingClause(ast.clause);
        this.target = new UsingTarget(ast.target, options);
        this.globalKeyword = (_a = ast.globalKeyword) === null || _a === void 0 ? void 0 : _a.unparse();
        metadata = updateMetadata(metadata, [this.clause, this.target]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return [
            joinExisting(' ', [
                'using',
                path.call(print, 'clause'),
                'for',
                path.call(print, 'target'),
                this.globalKeyword
            ]),
            ';'
        ];
    }
}
//# sourceMappingURL=UsingDirective.js.map