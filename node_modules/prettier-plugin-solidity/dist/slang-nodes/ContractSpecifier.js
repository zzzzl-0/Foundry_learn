import { NonterminalKind } from '@nomicfoundation/slang/cst';
import { getNodeMetadata, updateMetadata } from '../slang-utils/metadata.js';
import { InheritanceSpecifier } from './InheritanceSpecifier.js';
import { StorageLayoutSpecifier } from './StorageLayoutSpecifier.js';
export class ContractSpecifier {
    constructor(ast, options) {
        this.kind = NonterminalKind.ContractSpecifier;
        let metadata = getNodeMetadata(ast);
        switch (ast.variant.cst.kind) {
            case NonterminalKind.InheritanceSpecifier:
                this.variant = new InheritanceSpecifier(ast.variant, options);
                break;
            case NonterminalKind.StorageLayoutSpecifier:
                this.variant = new StorageLayoutSpecifier(ast.variant, options);
                break;
            default:
                throw new Error(`Unexpected variant: ${ast.variant.cst.kind}`);
        }
        metadata = updateMetadata(metadata, [this.variant]);
        this.comments = metadata.comments;
        this.loc = metadata.loc;
    }
    print(path, print) {
        return path.call(print, 'variant');
    }
}
//# sourceMappingURL=ContractSpecifier.js.map